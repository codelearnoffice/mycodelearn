import React, { useState } from 'react';
import { toast } from 'react-toastify';
import '../styles/CodeEditor.css';

const PROGRAMMING_LANGUAGES = [
  'Python', 'Java', 'C++', 'JavaScript', 'HTML/CSS', 'PHP', 'Ruby',
  'Swift', 'Kotlin', 'Go', 'Rust', 'TypeScript', 'R'
];

export default function CodeEditor() {
  const [code, setCode] = useState('');
  const [programmingLanguage, setProgrammingLanguage] = useState('Python');
  const [output, setOutput] = useState('');
  const [loading, setLoading] = useState(false);

  const runCode = async () => {
    if (!code.trim()) {
      toast.error('Please enter some code to run');
      return;
    }

    setLoading(true);
    try {
      const prompt = `Act as a ${programmingLanguage} code interpreter and error checker. Here's the code:\n\n${code}\n\nIf there are any errors, explain them in simple terms and suggest fixes. If the code is correct, show the expected output.`;

      const response = await fetch('https://api.a0.dev/ai/llm', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          messages: [
            { role: 'system', content: 'You are a helpful programming interpreter.' },
            { role: 'user', content: prompt }
          ]
        })
      });

      const data = await response.json();
      setOutput(data.completion);
      toast.success('Code executed!');
    } catch (error) {
      toast.error('Failed to run code');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="code-editor-container">
      <div className="scroll-view">
        <h1 className="title">Online Code Editor</h1>
        
        <div className="picker-container">
          <label className="label">Programming Language:</label>
          <select
            className="select"
            value={programmingLanguage}
            onChange={(e) => setProgrammingLanguage(e.target.value)}
          >
            {PROGRAMMING_LANGUAGES.map((lang) => (
              <option key={lang} value={lang}>{lang}</option>
            ))}
          </select>
        </div>

        <div className="picker-container">
          <label className="label">Code Editor:</label>
          <textarea
            className="code-input"
            value={code}
            onChange={(e) => setCode(e.target.value)}
            placeholder="Write your code here..."
            rows={15}
            spellCheck={false}
          />
        </div>

        <button 
          className={`button ${loading ? 'button-disabled' : ''}`}
          onClick={runCode}
          disabled={loading}
        >
          {loading ? (
            <>
              <div className="spinner" />
              <span>Running...</span>
            </>
          ) : (
            'Run Code'
          )}
        </button>

        {output && (
          <div className="output-container">
            <h2 className="output-title">Output:</h2>
            <div className="output-text">{output}</div>
          </div>
        )}
      </div>
    </div>
  );
} 